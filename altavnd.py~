#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Manto  de Vendedores DRBR 26-May-2007
import sys
import string, os
try:
  import pygtk
  pygtk.require('2.0')
except:
  pass
try:
  import gtk
  import gtk.glade
except:
  sys.exit(1)
try:
  import MySQLdb
except:
  sys.exit(1)
import def_tablas
import utils

global mydb
global cia_z
global mibd
global cias
global vendedor
dirprogs_z = "\\python\\pruglade\\altaalm\\"

#-- Define additional constants
EXIT         = 0
CONTINUE     = 1
NUEVO        = 1
MODIFICA     = 2
BORRAR       = 3
modo_z       = 0
mibd = def_tablas.lee_basedato_ini()
cias = def_tablas.define_cias()
vendedor = def_tablas.define_vendedor()

class Altavnd:
  """Esta es una aplicación Alta Almacenes"""
       
  def __init__(self):
       
    #Establecemos el archivo Glade
    self.gladefile = dirprogs_z + "altavnd.glade"
    self.wTree = gtk.glade.XML(self.gladefile)
    dic = { "on_btn_nuevo_clicked": self.on_btn_nuevo_clicked, \
            "on_btn_modif_clicked": self.on_btn_modif_clicked, \
            "on_btn_borra_clicked": self.on_btn_borra_clicked, \
            "on_btn_aceptar_clicked": self.on_btn_aceptar_clicked, \
            "on_btn_cancelar_clicked": self.on_btn_cancelar_clicked
            }
#                "on_win_altavnd_destroy": gtk.main_quit }
    self.wTree.signal_autoconnect(dic)
    global cias
    global vendedor
    global cia_z
    global mydb
    cia_z = 1
    cias_lines = []
    basedato_z = []

    fh_cias = open('.cias.ini')
    for line in fh_cias.readlines():
        cias_lines.append(string.rstrip(line))
    cia_z = cias_lines[0]

# execute SQL statement
    #mydb = MySQLdb.connect(mibd['host'], mibd['user'], mibd['password'], mibd['base'])

    sql_z = "select * from ciasinv where cia = " + repr(cia_z)
    cias['razon']="MDS"
    #cursor = mydb.cursor()
    #cursor.execute(sql_z)
    #record = cursor.fetchone()
    #cias['cia'] = record[0]
    #cias['razon'] = record[1]
    #cias['dir'] = record[2]
    #cias['dir2'] = record[3]
    #cias['nomfis'] = record[4]
    #cias['tel'] = record[5]
    #cias['fax'] = record[6]
    #cias['rfc'] = record[7]
    miwin = self.wTree.get_widget("win_altavnd")
    miwin.set_title(cias['razon'] + " Mantenimiento de Vendedores")
    self.editable_onoff(False)

    self.lista_vendedores = gtk.ListStore(str, str)
    grd_vendedores = self.wTree.get_widget("grd_vendedores")
    grd_vendedores.set_model(self.lista_vendedores)
    self.col01 = gtk.TreeViewColumn('Codigo')
    self.col02 = gtk.TreeViewColumn('Nombre')
    grd_vendedores.append_column(self.col01)
    grd_vendedores.append_column(self.col02)
    self.cell01 = gtk.CellRendererText()
    self.cell02 = gtk.CellRendererText()
    self.col01.pack_start(self.cell01, False)
    self.col02.pack_start(self.cell02, False)
    self.col01.set_attributes(self.cell01, text=0)
    self.col02.set_attributes(self.cell02, text=1)
    #self.llena_vendedores()
    grd_vendedores.connect("cursor-changed", self.get_seleccion)
   

  def on_btn_primero_clicked(self, widget):
      self.busca_vnd("P")

  def on_btn_anter_clicked(self, widget):
      self.busca_vnd("A", vendedor['codigo'])

  def on_btn_sigte_clicked(self, widget):
      self.busca_vnd("S", vendedor['codigo'])

  def on_btn_ultimo_clicked(self, widget):
      self.busca_vnd("U")

  def on_btn_nuevo_clicked(self, widget):
      global modo_z
      modo_z = NUEVO
      edt_codigo  = self.wTree.get_widget("edt_codigo")
      self.editable_onoff(True)
      edt_codigo.grab_focus()

  def on_btn_modif_clicked(self, widget):
      global modo_z
      modo_z = MODIFICA
      edt_nombre = self.wTree.get_widget("edt_nombre")
      self.editable_onoff(True)
      edt_nombre.grab_focus()

  def on_btn_borra_clicked(self, widget):
      codigo_z = vendedor['codigo']
      nombre_z = vendedor['nombre']
      resp_z = utils.yesnodlg("Seguro de Eliminar este Vendedor ?" + nombre_z)
      if resp == gtk.RESPONSE_OK:
         sql_z = "delete from vendedor where codigo='" + codigo_z + "'"
         cursor = mydb.cursor()
         cursor.execute(sql_z)
         self.limpia_campos()
        #End if
      message.destroy()

  def on_btn_cancelar_clicked(self, widget):
      self.editable_onoff(False)

  def on_btn_aceptar_clicked(self, widget):
      self.editable_onoff(False)
      global modo_z
      sql_z = ''
      self.okcancel = True
      edt_codigo  = self.wTree.get_widget("edt_codigo")
      edt_nombre  = self.wTree.get_widget("edt_nombre")

      vendedor['codigo']   = edt_codigo.get_text().upper()
      vendedor['nombre']  = edt_nombre.get_text().upper()
      if modo_z == NUEVO:
         sql_z = "insert into vendedor ( codigo, nombre ) values ( "
         sql_z = sql_z + "'" + vendedor['codigo'] + "',"
         sql_z = sql_z + "'" + vendedor['nombre'] + "')"
          
      elif modo_z == MODIFICA:
         sql_z = "update vendedor set "
         sql_z = sql_z + "nombre = '" + vendedor['nombre'] + "'"
         sql_z = sql_z + " where codigo = '" + vendedor['codigo'] + "'"
      cursor = mydb.cursor()
      print sql_z
      cursor.execute(sql_z)

  def llena_vendedores(self):
      global mydb
      global cia_z
      cursor = mydb.cursor()
      sql_z = "SELECT codigo, nombre FROM vendedor order by codigo "
      cursor.execute(sql_z)
      result = cursor.fetchall()
      self.lista_vendedores.clear()
      for record in result:
          self.lista_vendedores.append([ record[0], record[1] ])

  def busca_vnd(self, hacia_z, codigo_z=''):
      global mydb
      global cia_z
      cursor = mydb.cursor()
      sql_z = "SELECT codigo, nombre FROM vendedor where "
      if hacia_z == 'P':
        sql_z = sql_z + "codigo = ( select min(codigo) from vendedor)"
      elif hacia_z == 'U':
        sql_z = sql_z + "codigo = ( select max(codigo) from vendedor)"
      elif hacia_z == 'A':
        sql_z = sql_z + "codigo = ( select max(codigo) from vendedor where codigo < '" + codigo_z + "')"
      elif hacia_z == 'S':
        sql_z = sql_z + "codigo = ( select min(codigo) from vendedor where codigo > '" + codigo_z + "')"
# execute SQL statement
      cursor.execute(sql_z)
      numrows = int(cursor.rowcount)
      if numrows > 0:
        record = cursor.fetchone()
        vendedor['codigo']    = record[0]
        vendedor['nombre']  = record[1]
        self.despliega_datos()

  def despliega_datos(self):
      edt_codigo  = self.wTree.get_widget("edt_codigo")
      edt_nombre  = self.wTree.get_widget("edt_nombre")

      edt_codigo.set_text  (vendedor['codigo'])
      edt_nombre.set_text  (vendedor['nombre'])

  def limpia_campos(self):
      edt_codigo  = self.wTree.get_widget("edt_codigo")
      edt_nombre  = self.wTree.get_widget("edt_nombre")

  def get_seleccion(self, widget, data=None, data2=None):
      grd_vendedores = self.wTree.get_widget("grd_vendedores")
      selection = grd_vendedores.get_selection()
      # Get the selection iter
      model, selection_iter = selection.get_selected()
      if (selection_iter):
          codigo_z = self.lista_vendedores.get_value(selection_iter, 0)
          nombre_z = self.lista_vendedores.get_value(selection_iter, 1)
          vendedor['codigo'] = codigo_z;
          vendedor['nombre'] = nombre_z;
          self.despliega_datos()

  def limpia_campos(self):
      edt_codigo  = self.wTree.get_widget("edt_codigo")
      edt_nombre  = self.wTree.get_widget("edt_nombre")
      edt_codigo.set_text  ('')
      edt_nombre.set_text  ('')

  def editable_onoff(self, modo):
      edt_codigo  = self.wTree.get_widget("edt_codigo")
      edt_nombre  = self.wTree.get_widget("edt_nombre")
      btn_ok      = self.wTree.get_widget("btn_ok")
      btn_cancel  = self.wTree.get_widget("btn_cancelar")
      btn_nuevo   = self.wTree.get_widget("btn_nuevo")
      btn_modif   = self.wTree.get_widget("btn_modif")
      btn_borra   = self.wTree.get_widget("btn_borra")
    
      edt_codigo.set_editable(modo)
      edt_nombre.set_editable(modo)
      btn_ok.set_child_visible(modo)
      btn_cancel.set_child_visible(modo)
      btn_nuevo.set_child_visible(not(modo))
      btn_modif.set_child_visible(not(modo))
      btn_borra.set_child_visible(not(modo))

if __name__ == "__main__":
   hwg = Altavnd()
   gtk.main()

def main():

    gtk.main()
    return 0
